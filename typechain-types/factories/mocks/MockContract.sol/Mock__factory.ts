/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Mock, MockInterface } from "../../../mocks/MockContract.sol/Mock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "version_",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "anotherMock_",
        type: "address",
      },
      {
        internalType: "address",
        name: "anotherAnotherMock_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "_a",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "a_",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a_",
        type: "uint256",
      },
    ],
    name: "setA",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
    ],
    name: "setMsg",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x61010060405234801561001157600080fd5b506040516107213803806107218339810160408190526100309161006d565b3360805260a0929092526001600160a01b0390811660e0521660c0526100a9565b80516001600160a01b038116811461006857600080fd5b919050565b60008060006060848603121561008257600080fd5b8351925061009260208501610051565b91506100a060408501610051565b90509250925092565b60805160a05160c05160e0516106426100df600039600050506000505060005050600081816091015261020001526106426000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063ced7b2e311610050578063ced7b2e3146100e8578063d28d8852146100ff578063ee919d501461011457600080fd5b806388cc58e4146100775780638beaf7d7146100c0578063c4784fd4146100d5575b600080fd5b60405173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001681526020015b60405180910390f35b6100d36100ce3660046103e7565b610127565b005b6100d36100e33660046104ba565b610149565b6100f160025481565b6040519081526020016100b7565b61010761015a565b6040516100b7919061052c565b6100d361012236600461059f565b600255565b61012f6101e8565b815161014290600190602085019061028d565b5060025550565b61015560018383610311565b505050565b60018054610167906105b8565b80601f0160208091040260200160405190810160405280929190818152602001828054610193906105b8565b80156101e05780601f106101b5576101008083540402835291602001916101e0565b820191906000526020600020905b8154815290600101906020018083116101c357829003601f168201915b505050505081565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461028b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4368696c6450726f78793a206f6e6c7920666163746f727920616c6c6f776564604482015260640160405180910390fd5b565b828054610299906105b8565b90600052602060002090601f0160209004810192826102bb5760008555610301565b82601f106102d457805160ff1916838001178555610301565b82800160010185558215610301579182015b828111156103015782518255916020019190600101906102e6565b5061030d9291506103a3565b5090565b82805461031d906105b8565b90600052602060002090601f01602090048101928261033f5760008555610301565b82601f10610376578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555610301565b82800160010185558215610301579182015b82811115610301578235825591602001919060010190610388565b5b8082111561030d57600081556001016103a4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156103fa57600080fd5b823567ffffffffffffffff8082111561041257600080fd5b818501915085601f83011261042657600080fd5b813581811115610438576104386103b8565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561047e5761047e6103b8565b8160405282815288602084870101111561049757600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b600080602083850312156104cd57600080fd5b823567ffffffffffffffff808211156104e557600080fd5b818501915085601f8301126104f957600080fd5b81358181111561050857600080fd5b86602082850101111561051a57600080fd5b60209290920196919550909350505050565b600060208083528351808285015260005b818110156105595785810183015185820160400152820161053d565b8181111561056b576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6000602082840312156105b157600080fd5b5035919050565b600181811c908216806105cc57607f821691505b60208210811415610606577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea2646970667358221220f6ae2638221f77d6a5d2fa6a0e6a1421cb8e6ab683d7da5a31d872e1482ace6864736f6c634300080b0033";

type MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Mock__factory extends ContractFactory {
  constructor(...args: MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    version_: PromiseOrValue<BigNumberish>,
    anotherMock_: PromiseOrValue<string>,
    anotherAnotherMock_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Mock> {
    return super.deploy(
      version_,
      anotherMock_,
      anotherAnotherMock_,
      overrides || {}
    ) as Promise<Mock>;
  }
  override getDeployTransaction(
    version_: PromiseOrValue<BigNumberish>,
    anotherMock_: PromiseOrValue<string>,
    anotherAnotherMock_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      version_,
      anotherMock_,
      anotherAnotherMock_,
      overrides || {}
    );
  }
  override attach(address: string): Mock {
    return super.attach(address) as Mock;
  }
  override connect(signer: Signer): Mock__factory {
    return super.connect(signer) as Mock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockInterface {
    return new utils.Interface(_abi) as MockInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Mock {
    return new Contract(address, _abi, signerOrProvider) as Mock;
  }
}
