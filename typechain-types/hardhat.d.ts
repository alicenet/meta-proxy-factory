/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "DeterministicAddress",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DeterministicAddress__factory>;
    getContractFactory(
      name: "Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Mock__factory>;
    getContractFactory(
      name: "Mock2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Mock2__factory>;
    getContractFactory(
      name: "Mock3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Mock3__factory>;
    getContractFactory(
      name: "IProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProxy__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ProxyChild",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyChild__factory>;
    getContractFactory(
      name: "ProxyFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyFactory__factory>;
    getContractFactory(
      name: "ProxyFactoryBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyFactoryBase__factory>;

    getContractAt(
      name: "DeterministicAddress",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DeterministicAddress>;
    getContractAt(
      name: "Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Mock>;
    getContractAt(
      name: "Mock2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Mock2>;
    getContractAt(
      name: "Mock3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Mock3>;
    getContractAt(
      name: "IProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProxy>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ProxyChild",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyChild>;
    getContractAt(
      name: "ProxyFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyFactory>;
    getContractAt(
      name: "ProxyFactoryBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyFactoryBase>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
